@namespace FrontendBlazor.Client.Pages.Components
@using FrontendBlazor.Client.Models

<td>
	<div class="btn btn-outline-secondary" @onclick="OnShowModalClick">
		+
	</div>
</td>

<Modal @ref="modal" Title="Modal">
	<BodyTemplate>
		<div class="form-control">
			<label>Employe</label>
			<label>@Employ</label>
		</div>
		<label>Date</label>
		<DateInput TValue="DateOnly" @bind-Value="@Date"/>
		<label>Shift</label>
		<select class="form-select" @onchange="OnChangeShift">
		@foreach(var type in Enum.GetNames(typeof(ShiftType)))
		{
						<option>@type</option>
		}
		</select>
		<label>Start</label>
		<TimeInput TValue="TimeOnly" @bind-Value="@newStart"/>
		<label>End</label>
		<TimeInput TValue="TimeOnly" @bind-Value="@newEnd"/>
		
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Primary" @onclick="AddShift">Add</Button>
		<Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
	</FooterTemplate>
</Modal>

@code {
	[Parameter]
	public string Employ { get; set; } = string.Empty;

	[Parameter]
	public DateOnly Date { get; set; }

	[Parameter]
	public EventCallback<Shift> OnShiftAdded { get; set; }

	private TimeOnly newStart { get; set; } = new TimeOnly(6, 0);
	private TimeOnly newEnd { get; set; } = new TimeOnly(14, 0);

	private Modal modal;

	private void AddShift()
	{
		var shift = new Shift(Employ, Date, newStart, newEnd);
		OnShiftAdded.InvokeAsync(shift);
	}

	private void OnChangeShift(ChangeEventArgs e)
	{
		Enum.TryParse<ShiftType>(e.Value!.ToString(), out var shiftType);
		newStart = shiftType switch
		{
			ShiftType.First => new TimeOnly(6, 0),
			ShiftType.Second => new TimeOnly(14, 0),
			ShiftType.Third => new TimeOnly(22, 0),
			_ => new TimeOnly(0, 0)
		};
		newEnd = shiftType switch
		{
			ShiftType.First => new TimeOnly(14, 0),
			ShiftType.Second => new TimeOnly(22, 0),
			ShiftType.Third => new TimeOnly(6, 0),
			_ => new TimeOnly(0, 0)
		};
	}

	private async Task OnShowModalClick()
	{
		await modal.ShowAsync();
	}

	private async Task OnHideModalClick()
	{
		await modal.HideAsync();
	}
}
