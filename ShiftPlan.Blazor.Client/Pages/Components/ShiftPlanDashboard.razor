@namespace ShiftPlan.Blazor.Client.Pages.Components

@rendermode InteractiveWebAssembly

@inject IShiftsService shiftService
@inject IEmployeesService employeeService
@inject IConfiguration configuration

@using ShiftPlan.Blazor.Client.Services
@using ShiftPlan.Blazor.Commons.Exceptions
@using ShiftPlan.Blazor.Commons.Helpers
@using ShiftPlan.Blazor.Commons.Models
@using ShiftPlan.Blazor.Commons.Services
@using ShiftPlan.Blazor.Client.Pages.Components
@using ShiftPlan.Blazor.Client.Pages.Components.UserIdentity

@{
	var offlineMode = configuration.GetSection("OfflineMode").Value;
	bool.TryParse(offlineMode, out bool isOfflineModeEnabled);
	if (isOfflineModeEnabled)
	{
		<Button Color="ButtonColor.Primary" @onclick="LoadEmployeeShifts">Load shifts</Button>
		<Button Color="ButtonColor.Primary" @onclick="SaveEmployeeShifts">Save shifts</Button>
	}
}

<div class="row d-flex">
	<div class="col-3 justify-content-start">
		<h3>ShiftPlan</h3>
	</div>
	<div class="col-6 justify-content-center">
		<AddEmployeeModal InsertEmployee="InsertOrUpdateEmployee" />
		<RemoveEmployeeModal RemoveEmployee="RemoveEmployee" Employees="employees" />
	</div>
	<div class="col-3 justify-content-end">
		<UserComponent />
	</div>
</div>

<ShiftPlanTableComponent employees="employees" shifts="shifts" OnRemoveShift="RemoveShift" OnShiftInsertOrUpdate="InsertOrUpdateShift" />

@code {
	[Inject] protected ToastService toastService { get; set; } = new();
	public List<Employee> employees = [];
	public List<Shift> shifts = [];
	public ILoadSaveService jsonservice = new LocalFileService();
	public string fileJsonSave = Path.Combine(Path.GetTempPath(), "employeeshifts.json");

	protected override async Task OnInitializedAsync()
	{
		var offlineMode = configuration.GetSection("OfflineMode").Value;
		bool.TryParse(offlineMode, out bool isOfflineModeEnabled);
		if (isOfflineModeEnabled)
		{
			await SaveEmployeeShifts();
		}

		await TryGetEmployees();
		await TryGetShifts();

		async Task TryGetEmployees()
		{
			try
			{
				employees = (await employeeService.GetAll())?.ToList() ?? [];
			}
			catch (HttpCommunicationException ex)
			{
				toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Error", ex.Message));
			}
		}

		async Task TryGetShifts()
		{
			try
			{
				var shiftRequestResult = await shiftService.GetAll();
				shifts = shiftRequestResult?.ToList() ?? [];
			}
			catch (HttpCommunicationException ex)
			{
				toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Error", ex.Message));
			}
		}
	}


	private async Task RemoveShift(Shift shift)
	{
		try
		{
			await shiftService.Remove(shift);
			shifts.Remove(shift);
		}
		catch (HttpCommunicationException ex)
		{
			toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Error", ex.Message));
		}
	}

	private async Task InsertOrUpdateEmployee(Employee employee)
	{
		try
		{
			var newEmployee = await employeeService.InsertOrUpdate(employee);
			var existingEmployee = employees.FirstOrDefault(e => e.Id == newEmployee?.Id);
			if (existingEmployee is not null)
			{
				employees.Remove(existingEmployee);
			}
			if (newEmployee is null) return;
			employees.Add(newEmployee);
		}
		catch (HttpCommunicationException ex)
		{
			toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Error", ex.Message));
		}

	}

	private async Task RemoveEmployee(Employee employee)
	{
		try
		{
			await employeeService.Remove(employee);
			employees.Remove(employee);
		}
		catch (HttpCommunicationException ex)
		{
			toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Error", ex.Message));
		}
		catch (Exception ex)
		{
			return;
		}
	}

	private async Task InsertOrUpdateShift(Shift shift)
	{
		try
		{
			var newShift = await shiftService.InsertOrUpdate(shift);

			var existingShift = shifts.FirstOrDefault(s => s.Id == newShift?.Id);
			if (existingShift != null)
			{
				shifts.Remove(existingShift);
			}
			if (newShift is null) return;
			shifts.Add(newShift);

		}
		catch (HttpCommunicationException ex)
		{
			toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Error", ex.Message));
		}
	}

	private async Task LoadEmployeeShifts()
	{
		var getEmployeeAndShifts = await jsonservice.LoadLocalFileAsSingle(fileJsonSave) as LocalShiftsAndEmployees;
		if (getEmployeeAndShifts != null)
		{
			employees = getEmployeeAndShifts.Employees;
			shifts = getEmployeeAndShifts.Shifts;
		}
		if (File.Exists(fileJsonSave))
		{
			toastService.Notify(ToastNotificationHelper.SuccessToastMessage("Information", $"File was created : {fileJsonSave}"));
			return;
		}
		toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Error", $"File was not created : {fileJsonSave}"));
	}

	private async Task SaveEmployeeShifts()
	{
		if (shifts.Count() == 0)
		{
			await jsonservice.SaveLocalFileAsSingle(SeedData(), fileJsonSave);
		}
		else
		{
			await jsonservice.SaveLocalFileAsSingle(new LocalShiftsAndEmployees(employees, shifts), fileJsonSave);
		}
		if (File.Exists(fileJsonSave))
		{
			toastService.Notify(ToastNotificationHelper.SuccessToastMessage("Information", $"File was created : {fileJsonSave}"));
			return;
		}
		toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Error", $"File was not created : {fileJsonSave}"));
	}

	private LocalShiftsAndEmployees SeedData()
	{
		var results = new LocalShiftsAndEmployees(new List<Employee>(), new List<Shift>());
		var employees = new List<Employee> { new Employee("Employee1", 1),
									 new Employee("Employee2", 2),
									 new Employee("Employee3", 3)};
		var currentShifts = new List<Shift>();
		var insertedEmploy = employees.Where(x => x.Name == "Employee1").Select(x => x).FirstOrDefault();
		if (insertedEmploy != null)
		{
			currentShifts = SeedShifts(insertedEmploy, "6:00:00","14:00:00");
		}

		insertedEmploy = employees.Where(x => x.Name == "Employee2").Select(x => x).FirstOrDefault();
		if (insertedEmploy != null)
		{
			currentShifts.AddRange(SeedShifts(insertedEmploy, "14:00:00", "22:00:00"));			
		}
		results = new LocalShiftsAndEmployees(employees, currentShifts);
		return results;
	}

	private List<Shift> SeedShifts(Employee employee, string startTime, string endTime)
	{
		var currentShifts = new List<Shift>();
		int weekToFill = 1;//only one week is fill in from monday to friday
		for (int i = 0; i < weekToFill; i++)
		{
			if (i == 0)
			{
				DateTime currentDay = DateTime.Today;
				if (currentDay.DayOfWeek == DayOfWeek.Sunday)
				{
					currentDay = currentDay.AddDays(1);
				}
				if (currentDay.DayOfWeek == DayOfWeek.Saturday)
				{
					currentDay = currentDay.AddDays(2);
				}
				var lastDay = System.Linq.Enumerable.Range(0, 6)
						.Select(i => currentDay.AddDays(i))
						.Last(day => day.DayOfWeek == DayOfWeek.Friday);
				var firstShift = new Shift(employee, DateOnly.FromDateTime(currentDay), TimeOnly.Parse(startTime), TimeOnly.Parse(endTime), 0);
				currentShifts.Add(firstShift);
				while (currentDay != lastDay)
				{
					currentDay = currentDay.AddDays(1);
					var firstShift2 = new Shift(employee, DateOnly.FromDateTime(currentDay), TimeOnly.Parse(startTime), TimeOnly.Parse(endTime), 0);
					currentShifts.Add(firstShift2);
				};
			}
		}
		return currentShifts;
	}

}
