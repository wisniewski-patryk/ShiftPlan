@namespace ShiftPlan.Blazor.Client.Pages.Components.UserIdentity

@using Blazored.SessionStorage
@using ShiftPlan.Blazor.Commons.Exceptions
@using ShiftPlan.Blazor.Commons.Helpers
@using ShiftPlan.Blazor.Commons.Services

<div class="container">
	@if (userIsLogin)
	{
		<Button Color="ButtonColor.Danger" @onclick="OnShowLogoutModalClick">Logout</Button>
	} else
	{
		<Button Color="ButtonColor.Primary" @onclick="OnShowLoginModalClick">Login</Button>
		<Button Color="ButtonColor.Secondary" @onclick="OnShowRegisterModalClick">Register</Button>
	}
</div>

<Modal @ref="loginModal" Title="@modalTitle" ShowCloseButton="true" OnHidden="ResetInputFields">
	<BodyTemplate>
		<div>
			<label class="form-label" for="userEmailId">Email</label>
			<InputText class="form-control" id="userEmailId" @bind-Value="userEmail" placeholder="address@email.com"/>
		</div>
		<div>
			<label class="form-label" for="userPasswordId">password</label>
			<InputText class="form-control" id="userPasswordId" @bind-Value="userPassword" type="password" placeholder="Password"/>
		</div>
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Primary" @onclick="LoginUser" >Login</Button>
	</FooterTemplate>
</Modal>

<Modal @ref="logoutModal" Title="@modalTitle" ShowCloseButton="true">
	<BodyTemplate>
		<p>Do you want logout?</p>
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Danger" @onclick="LogoutUser">Logout</Button>
	</FooterTemplate>
</Modal>

<Modal @ref="registerModal" Title="Register" ShowCloseButton="true" OnHidden="ResetInputFields">
	<BodyTemplate>
		<p>Password should contain at least 8 characters, including at least one uppercase letter, one number, and one non alphanumeric character.</p>
		<div>
			<label class="form-label" for="userEmailId">Email</label>
			<InputText class="form-control" id="userEmailId" @bind-Value="userEmail" placeholder="address@email.com" />
		</div>
		<div>
			<label class="form-label" for="userPasswordId">password</label>
			<InputText class="form-control" id="userPasswordId" @bind-Value="userPassword" type="password" placeholder="Password" />
		</div>
	</BodyTemplate>
	<FooterTemplate>
		<Button Color="ButtonColor.Primary" @onclick="RegisterUser">Register</Button>
	</FooterTemplate>
</Modal>

@code {
	[Inject] protected ToastService toastService { get; set; }
	[Inject] protected IUserIdentityService userService { get; set; }
	[Inject] protected ISessionStorageService sessionStorage { get; set; }

	private bool userIsLogin = false;

	private string modalTitle => userIsLogin ? "Logout" : "Login";

	private string userEmail = string.Empty;
	private string userPassword = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		var accessTokenAvaiable = await sessionStorage.GetItemAsStringAsync("accessToken");
		if (accessTokenAvaiable is "" || accessTokenAvaiable is null)
		{
			userIsLogin = false;
		} else
		{
			userIsLogin = true;
		}
	}

	private Modal loginModal = new();
	private async Task OnShowLoginModalClick() => await loginModal.ShowAsync();
	private async Task OnHideLoginModalClick()
	{
		ResetInputFields();
		await loginModal.HideAsync();
	}

	private async Task LoginUser()
	{
		if (string.IsNullOrWhiteSpace(userEmail) || string.IsNullOrWhiteSpace(userPassword))
		{
			toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Credential error", "User email or password is not provided"));
			return;
		}
		try
		{
			await userService.LoginUser(userEmail, userPassword);
			userIsLogin = true;
		}
		catch
		(HttpCommunicationException ex)
		{
			toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Error", ex.Message));
		}
		await OnHideLoginModalClick();
	}

	private Modal logoutModal = new();
	private async Task OnShowLogoutModalClick() => await logoutModal.ShowAsync();
	private async Task OnHideLogoutModalClick() => await logoutModal.HideAsync();
	private async Task LogoutUser()
	{
		await userService.LogoutUser();
		toastService.Notify(ToastNotificationHelper.SuccessToastMessage("Success", "Logout successful"));
		userIsLogin = false;
		await OnHideLogoutModalClick();
	}

	private Modal registerModal = new();
	private async Task OnShowRegisterModalClick() => await registerModal.ShowAsync();
	private async Task OnHideRegisterModalClick()
	{
		ResetInputFields();
		await registerModal.HideAsync();
	}

	private async Task RegisterUser()
	{
		try
		{
			await userService.RegisterNewUser(userEmail, userPassword);
		}
		catch (HttpCommunicationException ex)
		{
			toastService.Notify(ToastNotificationHelper.ErrorToastMessage("Error", ex.Message));
		}
		await OnHideRegisterModalClick();
	}

	private void ResetInputFields()
	{
		userEmail = string.Empty;
		userPassword = string.Empty;
	}
}
